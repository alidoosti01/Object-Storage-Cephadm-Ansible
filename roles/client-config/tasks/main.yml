---
- name: check connectivity
  ansible.builtin.ping:
    data: alive

- name: Install pip
  ansible.builtin.apt:
    name: python3-pip
    state: present

- name: install AWS cli
  ansible.builtin.pip:
    name: awscli
    state: present

- name: Create a folder for the user
  ansible.builtin.file:
    path: "/root/.aws"
    mode: 0744
    owner: root
    state: directory
    group: root

- name: RadosGW Create User
  ceph.automation.radosgw_user:
    name: "{{ client_name  }}"
    display_name: "{{ client_name }}"
    email: "{{ user_email }}"
    state: present
  delegate_to: "{{ groups['mons'] | first }}"

- name: Get client config file
  ansible.builtin.shell: 'radosgw-admin user info --uid="{{ client_name }}" > /root/{{ client_name }}.json'
  delegate_to: "{{ groups['mons'] | first }}"

- name: Check if JSON file exists
  ansible.builtin.stat:
    path: /root/{{ client_name }}.json
  register: json_file_stat
  delegate_to: "{{ groups['mons'] | first }}"

- name: Fail if JSON file is missing
  ansible.builtin.fail:
    msg: "File /root/{{ client_name }}.json does not exist!"
  when: not json_file_stat.stat.exists
  delegate_to: "{{ groups['mons'] | first }}"

- name: Read JSON file content
  ansible.builtin.slurp:
    src: /root/{{ client_name }}.json
  register: json_file_content
  delegate_to: "{{ groups['mons'] | first }}"

- name: Parse JSON
  ansible.builtin.set_fact:
    json_file: "{{ json_file_content['content'] | b64decode | from_json }}"

- name: Extract the keys
  ansible.builtin.set_fact:
    access_key: "{{ json_file['keys'][0]['access_key'] }}"
    secret_key: "{{ json_file['keys'][0]['secret_key'] }}"

- name: Create AWS profile
  ansible.builtin.template:
    src: config.j2
    dest: "/root/.aws/config"
  
- name: Create a config file for s3cmd
  ansible.builtin.template:
    src: credentials.j2
    dest: "/root/.aws/credentials"
  vars:
    secret_key: "{{ secret_key }}"
    access_key: "{{ access_key }}"
